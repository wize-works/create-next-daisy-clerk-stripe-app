name: Publish to NPM

on:
    release:
        types: [published]
    workflow_dispatch:
        inputs:
            version_source:
                description: "How to determine version to publish"
                required: true
                default: "package_json"
                type: choice
                options:
                    - package_json
                    - latest_tag
                    - manual
            manual_tag:
                description: "Manual tag (only if 'manual' is selected above)"
                required: false
                type: string

jobs:
    publish:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
                  cache: "npm"
                  registry-url: "https://registry.npmjs.org"

            - name: Install dependencies
              run: npm ci

            - name: Build package
              run: npm run build

            - name: Determine version to publish
              id: version
              run: |
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    # Manual workflow trigger
                    case "${{ github.event.inputs.version_source }}" in
                      "latest_tag")
                        echo "Using latest git tag..."
                        TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                        if [ -z "$TAG" ]; then
                          echo "⚠️  No git tags found, falling back to package.json version"
                          VERSION=$(node -p "require('./package.json').version")
                          TAG="v$VERSION"
                        fi
                        ;;
                      "package_json")
                        echo "Using version from package.json..."
                        VERSION=$(node -p "require('./package.json').version")
                        TAG="v$VERSION"
                        ;;
                      "manual")
                        echo "Using manually specified tag..."
                        TAG="${{ github.event.inputs.manual_tag }}"
                        if [ -z "$TAG" ]; then
                          echo "❌ Manual tag is required when 'manual' option is selected"
                          exit 1
                        fi
                        ;;
                    esac
                  else
                    # Release trigger
                    TAG=${GITHUB_REF#refs/tags/}
                  fi

                  # Extract version from tag (remove 'v' prefix if present)
                  VERSION=${TAG#v}
                  CURRENT_VERSION=$(node -p "require('./package.json').version")

                  echo "Target tag: $TAG"
                  echo "Target version: $VERSION"
                  echo "Current package.json version: $CURRENT_VERSION"

                  # Validate version format
                  if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+'; then
                    echo "❌ Invalid version format: $VERSION"
                    exit 1
                  fi

                  # Set outputs for later steps
                  echo "tag=$TAG" >> $GITHUB_OUTPUT
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

                  # Update package.json if needed
                  if [ "$VERSION" != "$CURRENT_VERSION" ]; then
                    echo "Updating package.json from $CURRENT_VERSION to $VERSION"
                    npm version $VERSION --no-git-tag-version
                  else
                    echo "✅ Package.json version already matches target version $VERSION"
                  fi

            - name: Publish to NPM
              run: npm publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Create GitHub deployment
              uses: actions/github-script@v7
              with:
                  script: |
                      await github.rest.repos.createDeployment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: context.sha,
                        environment: 'npm',
                        description: `Published version ${{ steps.version.outputs.tag }} to NPM`,
                        auto_merge: false,
                        required_contexts: []
                      });

            - name: Comment on release (if exists)
              if: github.event_name == 'release'
              uses: actions/github-script@v7
              with:
                  script: |
                      const tag = '${{ steps.version.outputs.tag }}';
                      const version = '${{ steps.version.outputs.version }}';

                      try {
                        const { data: release } = await github.rest.repos.getReleaseByTag({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          tag: tag
                        });

                        const comment = `🎉 Successfully published to NPM!\n\nVersion: ${version}\nPackage: @wizeworks/create-next-daisy-clerk-stripe-app@${version}\n\nInstall with: npx @wizeworks/create-next-daisy-clerk-stripe-app@latest my-app`;

                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: release.number,
                          body: comment
                        });
                      } catch (error) {
                        console.log('Release not found or unable to comment:', error.message);
                      }

            - name: Create success summary
              if: github.event_name == 'workflow_dispatch'
              uses: actions/github-script@v7
              with:
                  script: |
                      const tag = '${{ steps.version.outputs.tag }}';
                      const version = '${{ steps.version.outputs.version }}';
                      
                      core.summary
                        .addHeading('🎉 Successfully Published to NPM!')
                        .addTable([
                          [{data: 'Property', header: true}, {data: 'Value', header: true}],
                          ['Version', version],
                          ['Tag', tag],
                          ['Package', `@wizeworks/create-next-daisy-clerk-stripe-app@${version}`],
                          ['Install Command', `npx @wizeworks/create-next-daisy-clerk-stripe-app@latest my-app`]
                        ])
                        .addLink('View on NPM', `https://www.npmjs.com/package/@wizeworks/create-next-daisy-clerk-stripe-app`)
                        .write();
